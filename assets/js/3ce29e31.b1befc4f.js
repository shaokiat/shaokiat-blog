"use strict";(self.webpackChunksk_blog=self.webpackChunksk_blog||[]).push([[924],{4140:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return m},default:function(){return h},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return u}});var n=a(3117),r=a(102),i=(a(7294),a(3905)),l=["components"],o={},m="Arrays and Subarrays",s={unversionedId:"algorithms/arrays",id:"algorithms/arrays",title:"Arrays and Subarrays",description:"- Maximum Subarray",source:"@site/docs/algorithms/arrays.mdx",sourceDirName:"algorithms",slug:"/algorithms/arrays",permalink:"/shaokiat-blog/docs/algorithms/arrays",draft:!1,editUrl:"https://github.com/shaokiat/shaokiat-blog/tree/main/docs/algorithms/arrays.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/shaokiat-blog/docs/intro"},next:{title:"Binary Search Trees (BST)",permalink:"/shaokiat-blog/docs/algorithms/binary-search-trees"}},p={},u=[{value:"Time Complexity",id:"time-complexity",level:2},{value:"Common Approaches to Arrays and Subarrays Questions",id:"common-approaches-to-arrays-and-subarrays-questions",level:2},{value:"Prefix Sum",id:"prefix-sum",level:3},{value:"Sliding Window",id:"sliding-window",level:3},{value:"Subarray Sum",id:"subarray-sum",level:3},{value:"Kadane&#39;s Algorithm",id:"kadanes-algorithm",level:3},{value:"Example Solutions",id:"example-solutions",level:2},{value:"Maximum Subarray",id:"maximum-subarray",level:3},{value:"Solution 1: Dynamic Programming + Memoization",id:"solution-1-dynamic-programming--memoization",level:4},{value:"Solution 2: Kadane&#39;s Algorithm <mark>(Prefered Solution)</mark>",id:"solution-2-kadanes-algorithm-prefered-solution",level:4},{value:"Container With Most Water",id:"container-with-most-water",level:3},{value:"Solution 1: Sliding Window",id:"solution-1-sliding-window",level:4},{value:"Trapping Rain Water",id:"trapping-rain-water",level:3},{value:"Solution 1: Sliding Window (Easier to understand)",id:"solution-1-sliding-window-easier-to-understand",level:4},{value:"Solution 2: Stack",id:"solution-2-stack",level:4}],d={toc:u};function h(e){var t=e.components,a=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"arrays-and-subarrays"},"Arrays and Subarrays"),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Common Questions")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/maximum-subarray/"},"Maximum Subarray")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/subarray-sums-divisible-by-k/"},"Subarray Sums Divisible by K")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/subarray-sum-equals-k/"},"Subarray Sum Equals K")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/maximum-product-subarray/"},"Maximum Product Subarray")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/product-of-array-except-self/"},"Product of Array Except Self")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/trapping-rain-water/"},"Trapping Rain Water"))))),(0,i.kt)("h2",{id:"time-complexity"},"Time Complexity"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Operation"),(0,i.kt)("th",{parentName:"tr",align:null},"Big-O"),(0,i.kt)("th",{parentName:"tr",align:null},"Note"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Access"),(0,i.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Search"),(0,i.kt)("td",{parentName:"tr",align:null},"O(n)"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Search (sorted array)"),(0,i.kt)("td",{parentName:"tr",align:null},"O(log(n))"),(0,i.kt)("td",{parentName:"tr",align:null},"Binary Search")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Insert"),(0,i.kt)("td",{parentName:"tr",align:null},"O(n)"),(0,i.kt)("td",{parentName:"tr",align:null},"Insertion would require shifting all the subsequent elements to the right by one and that takes O(n)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Insert (at the end)"),(0,i.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,i.kt)("td",{parentName:"tr",align:null},"Special case of insertion where no other element needs to be shifted")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Remove"),(0,i.kt)("td",{parentName:"tr",align:null},"O(n)"),(0,i.kt)("td",{parentName:"tr",align:null},"Removal would require shifting all the subsequent elements to the left by one and that takes O(n)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Remove (at the end)"),(0,i.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,i.kt)("td",{parentName:"tr",align:null},"Special case of removal where no other element needs to be shifted")))),(0,i.kt)("h2",{id:"common-approaches-to-arrays-and-subarrays-questions"},"Common Approaches to Arrays and Subarrays Questions"),(0,i.kt)("h3",{id:"prefix-sum"},"Prefix Sum"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"nums = [10, 20, 5, 15]\nprefixSum = [10, 30, 35, 50]\n\nprefixSum[i] = prefixSum[i - 1] + arr[i]\n")),(0,i.kt)("h3",{id:"sliding-window"},"Sliding Window"),(0,i.kt)("h3",{id:"subarray-sum"},"Subarray Sum"),(0,i.kt)("h3",{id:"kadanes-algorithm"},"Kadane's Algorithm"),(0,i.kt)("h2",{id:"example-solutions"},"Example Solutions"),(0,i.kt)("h3",{id:"maximum-subarray"},(0,i.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/maximum-subarray/"},"Maximum Subarray")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"source")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Solutions are adapted from this ",(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximum-subarray/discuss/1595195/C%2B%2BPython-7-Simple-Solutions-w-Explanation-or-Brute-Force-%2B-DP-%2B-Kadane-%2B-Divide-and-Conquer"},"LeetCode discussion")," by ",(0,i.kt)("em",{parentName:"p"},"archit91")))),(0,i.kt)("h4",{id:"solution-1-dynamic-programming--memoization"},"Solution 1: Dynamic Programming + Memoization"),(0,i.kt)("p",null,"Bottom-up approach. ",(0,i.kt)("inlineCode",{parentName:"p"},"dp")," array will store the maximum subarray sum at its respective index"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"def maxSubArray(self, nums):\n    dp = nums\n    for i in range(1, len(nums)):\n        # Store maximum of nums[i] or nums[i] + previous maximum\n        dp[i] = max(nums[i], dp[i-1] + nums[i])\n    return max(dp)\n\nnums = [-2,1,-3,4,-1,2,1,-5,4]\ndp = [-2, 1, -2, 4, 3, 5, 6, 1, 5] # dp array after running\n")),(0,i.kt)("p",null,"Time Complexity: ",(0,i.kt)("inlineCode",{parentName:"p"},"O(n)")," for looping through the ",(0,i.kt)("inlineCode",{parentName:"p"},"nums")," array."),(0,i.kt)("p",null,"Space Complexity: ",(0,i.kt)("inlineCode",{parentName:"p"},"O(n)")," for storing dp array of size ",(0,i.kt)("inlineCode",{parentName:"p"},"n"),"."),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"solution-2-kadanes-algorithm-prefered-solution"},"Solution 2: Kadane's Algorithm ",(0,i.kt)("mark",null,"(Prefered Solution)")),(0,i.kt)("p",null,"Optimize previous solution in terms of space by only storing the maximum of each iteration. The global maximum will then\nbe the maximum of all the iterations."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"def maxSubArray(self, nums):\n    globalMax = localMax = nums[0] # Starts with nums[0]\n    for num in nums[1:]: # Iterate through remaining array nums[1:]\n        localMax = max(num, localMax + num)\n        globalMax = max(globalMax, localMax)\n    return globalMax\n")),(0,i.kt)("p",null,"Time Complexity: ",(0,i.kt)("inlineCode",{parentName:"p"},"O(n)")," for looping through the ",(0,i.kt)("inlineCode",{parentName:"p"},"nums")," array."),(0,i.kt)("p",null,"Space Complexity: ",(0,i.kt)("inlineCode",{parentName:"p"},"O(1)")," for 2 variables ",(0,i.kt)("inlineCode",{parentName:"p"},"globalMax")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"localMax"),"."),(0,i.kt)("br",null),(0,i.kt)("h3",{id:"container-with-most-water"},(0,i.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/container-with-most-water/"},"Container With Most Water")),(0,i.kt)("h4",{id:"solution-1-sliding-window"},"Solution 1: Sliding Window"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"def maxArea(self, height):\n    max_area = 0\n    left = 0\n    right = len(height) - 1\n    while left <= right: # terminating condition: left > right\n        h = min(height[left], height[right])\n        area = h * (right - left)\n        max_area = max(max_area, area)\n        # Shift window\n        if height[left] < height[right]:\n            left += 1\n        else:\n            right -= 1\n    return max_area\n")),(0,i.kt)("p",null,"Time Complexity: ",(0,i.kt)("inlineCode",{parentName:"p"},"O(n)")," for looping through the ",(0,i.kt)("inlineCode",{parentName:"p"},"height")," array."),(0,i.kt)("p",null,"Space Complexity: ",(0,i.kt)("inlineCode",{parentName:"p"},"O(1)")," for 3 variables ",(0,i.kt)("inlineCode",{parentName:"p"},"max_area")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"left")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"right"),"."),(0,i.kt)("h3",{id:"trapping-rain-water"},(0,i.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/trapping-rain-water/"},"Trapping Rain Water")),(0,i.kt)("h4",{id:"solution-1-sliding-window-easier-to-understand"},"Solution 1: Sliding Window (Easier to understand)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"def trap(self, height):\n    water = 0\n    i, j = 0, len(height) - 1\n    lmax, rmax = height[i], height[j]\n    while i <= j: # Terminates when i > j\n        lmax = max(lmax, height[i])\n        rmax = max(rmax, height[j])\n        if lmax <= rmax:\n            water += lmax - height[i] # Add height difference from lmax\n            i += 1\n        else:\n            water += rmax - height[j] # Add height difference from rmax\n            j -= 1\n    return water\n")),(0,i.kt)("p",null,"Time Complexity: ",(0,i.kt)("inlineCode",{parentName:"p"},"O(n)")," for looping through the ",(0,i.kt)("inlineCode",{parentName:"p"},"height")," array."),(0,i.kt)("p",null,"Space Complexity: ",(0,i.kt)("inlineCode",{parentName:"p"},"O(1)")," for constant variables."),(0,i.kt)("h4",{id:"solution-2-stack"},"Solution 2: Stack"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"def trap(self, height):\n    water = 0\n    stack = []\n    for i, h in enumerate(height):\n        if stack and h > height[stack[-1]]:\n            deal = stack.pop()\n            if stack:\n                w = i - stack[-1] - 1\n                water += (min(h, height[deal]) - height[i]) * w\n        stack.append(i)\n    return water\n\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Invariant"),": Stack always contain the indexes which have bar heights in decreasing order."),(0,i.kt)("p",null,"When we encounter a higher bar, we will pop the stack until we meet invariant then push the stack again."),(0,i.kt)("p",null,"Time Complexity: ",(0,i.kt)("inlineCode",{parentName:"p"},"O(n)")," for looping through the ",(0,i.kt)("inlineCode",{parentName:"p"},"height")," array."),(0,i.kt)("p",null,"Space Complexity: ",(0,i.kt)("inlineCode",{parentName:"p"},"O(n)")," for using a stack."))}h.isMDXComponent=!0},3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return h}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var m=n.createContext({}),s=function(e){var t=n.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(m.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,m=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=s(a),h=r,c=d["".concat(m,".").concat(h)]||d[h]||u[h]||i;return a?n.createElement(c,l(l({ref:t},p),{},{components:a})):n.createElement(c,l({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=d;var o={};for(var m in t)hasOwnProperty.call(t,m)&&(o[m]=t[m]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);
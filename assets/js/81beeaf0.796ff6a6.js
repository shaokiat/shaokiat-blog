"use strict";(self.webpackChunksk_blog=self.webpackChunksk_blog||[]).push([[618],{7286:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return m}});var r=t(3117),a=t(102),o=(t(7294),t(3905)),i=["components"],s={},l="Trees",p={unversionedId:"algorithms/trees",id:"algorithms/trees",title:"Trees",description:"- Lowest Common Ancestor of a Binary Tree",source:"@site/docs/algorithms/trees.mdx",sourceDirName:"algorithms",slug:"/algorithms/trees",permalink:"/shaokiat-blog/docs/algorithms/trees",draft:!1,editUrl:"https://github.com/shaokiat/shaokiat-blog/tree/main/docs/algorithms/trees.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Recursion and Backtracking",permalink:"/shaokiat-blog/docs/algorithms/recursion"},next:{title:"Predictive Maintenance",permalink:"/shaokiat-blog/docs/data-science/predictive-maintenance"}},c={},m=[{value:"Lowest Common Ancestor of a Binary Tree",id:"lowest-common-ancestor-of-a-binary-tree",level:3},{value:"Solution 1: Recursive Approach",id:"solution-1-recursive-approach",level:4},{value:"Solution 2: Iterative Approach",id:"solution-2-iterative-approach",level:4},{value:"Minimum Height Trees",id:"minimum-height-trees",level:3},{value:"Solution:",id:"solution",level:4},{value:"Tree Decrements",id:"tree-decrements",level:3},{value:"Solution:",id:"solution-1",level:4}],d={toc:m};function u(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"trees"},"Trees"),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"common questions")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("ul",{parentName:"div"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/description/"},"Lowest Common Ancestor of a Binary Tree")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/minimum-height-trees/"},"Minimum Height Trees"))))),(0,o.kt)("h3",{id:"lowest-common-ancestor-of-a-binary-tree"},(0,o.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/description/"},"Lowest Common Ancestor of a Binary Tree")),(0,o.kt)("h4",{id:"solution-1-recursive-approach"},"Solution 1: Recursive Approach"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"# class TreeNode:\n# def __init__(self, x):\n#   self.val = x\n#   self.left = None\n#   self.right = None\n\ndef lowestCommonAncestor(self, root, p, q):\n  if not root or root == p or root == q:\n    return root\n\n  left = self.lowestCommonAncestor(root.left, p, q)\n  right = self.lowestCommonAncestor(root.right, p, q)\n\n  if left and right:\n    return root\n  else:\n    return left or right\n")),(0,o.kt)("p",null,"Time Complexity: ",(0,o.kt)("inlineCode",{parentName:"p"},"O(n)")," for traversing the entire binary tree."),(0,o.kt)("p",null,"Space Complexity: ",(0,o.kt)("inlineCode",{parentName:"p"},"O(n)")," for the size of recursion stack."),(0,o.kt)("br",null),(0,o.kt)("h4",{id:"solution-2-iterative-approach"},"Solution 2: Iterative Approach"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"# class TreeNode:\n# def __init__(self, x):\n#   self.val = x\n#   self.left = None\n#   self.right = None\n\ndef lowestCommonAncestor(self, root, p, q):\n  stack = [root]\n  parent = {root: None}\n  while p not in parent or q not in parent:\n    node = stack.pop()\n    if node.left:\n      stack.append(node.left)\n      parent[node.left] = node\n    if node.right:\n      stack.append(node.right)\n      parent[node.right] = node\n\n  ancestor = set()\n  while p:\n    ancestor.add(p)\n    p = parent[p]\n  while q not in ancestor:\n    q = parent[q]\n  return q\n")),(0,o.kt)("p",null,"Time Complexity: ",(0,o.kt)("inlineCode",{parentName:"p"},"O(n)")," for traversing the entire binary tree."),(0,o.kt)("p",null,"Space Complexity: ",(0,o.kt)("inlineCode",{parentName:"p"},"O(n)")," for the spaced used for stack and parent dictionary."),(0,o.kt)("br",null),(0,o.kt)("h3",{id:"minimum-height-trees"},(0,o.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/minimum-height-trees/"},"Minimum Height Trees")),(0,o.kt)("h4",{id:"solution"},"Solution:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"def findMinHeightTrees(self, n: int, edges: List[List[int]]) -> List[int]:\n    if n == 1:\n        return [0]\n    # Build adjacency list\n    graph = [[] for i in range(n)]\n    for a, b in edges: # undirected edges\n        graph[b].append(a)\n        graph[a].append(b)\n\n    leaves = []\n    for i in range(n):\n        if len(graph[i]) == 1:\n            leaves.append(i)\n    while n > 2: # At most 2 nodes in final answer\n        newLeaves = []\n        n -= len(leaves)\n        for leaf in leaves:\n            i = graph[leaf].pop()\n            graph[i].remove(leaf)\n            if len(graph[i]) == 1:\n                newLeaves.append(i)\n        leaves = newLeaves\n    return leaves\n\n")),(0,o.kt)("p",null,"Time Complexity: ",(0,o.kt)("inlineCode",{parentName:"p"},"O(n)")," for traversing the entire tree."),(0,o.kt)("p",null,"Space Complexity: ",(0,o.kt)("inlineCode",{parentName:"p"},"O(n^2)")," for the space used by adjacency list."),(0,o.kt)("br",null),(0,o.kt)("h3",{id:"tree-decrements"},"Tree Decrements"),(0,o.kt)("h4",{id:"solution-1"},"Solution:"),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Code from ",(0,o.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/73922682/decrement-node-values-to-0-of-a-given-tree"},"Stack Overflow")))),(0,o.kt)("p",null,"Similar to ",(0,o.kt)("a",{parentName:"p",href:"#minimum-height-trees"},"Minimum Height Trees")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"# Complete the 'getMinCost' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY val\n#  2. UNWEIGHTED_INTEGER_GRAPH t\n#\n\n# For the unweighted graph, <name>:\n#\n# 1. The number of nodes is <name>_nodes.\n# 2. The number of edges is <name>_edges.\n# 3. An edge exists between <name>_from[i] and <name>_to[i].\n\ndef getMinCost(val, t_nodes, t_from, t_to):\n    # Write your code here\n    for i in range(t_nodes):\n        val[i] = val[i] % 2\n    adjList = [[] for _ in range(t_nodes)]\n    for i in range(len(t_from)):\n        adjList[t_from[i]-1].append(t_to[i]-1)\n        adjList[t_to[i]-1].append(t_from[i]-1)\n    # get leaves\n    leaves = [i for i in range(t_nodes) if len(adjList[i]) == 1]\n    remaining = t_nodes\n    cost = 0\n    while leaves and remaining > 2:\n        remaining -= len(leaves)\n        newLeaves = []\n        for leaf in leaves:\n            parent = adjList[leaf].pop()\n            adjList[parent].remove(leaf)\n            if val[leaf] == 1: #odd\n                cost += 1\n                val[parent] = 1 - val[parent]\n\n            if len(adjList[parent]) == 1:\n                newLeaves.append(parent)\n        leaves = newLeaves\n    # Check if remaining 2 leaves are odd\n    if leaves and val[leaves[0]] == 1:\n        cost += 1\n    return cost\n")))}u.isMDXComponent=!0},3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return u}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(t),u=a,f=d["".concat(l,".").concat(u)]||d[u]||m[u]||o;return t?r.createElement(f,i(i({ref:n},c),{},{components:t})):r.createElement(f,i({ref:n},c))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);
"use strict";(self.webpackChunksk_blog=self.webpackChunksk_blog||[]).push([[138],{1138:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return u}});var r=n(3117),a=n(102),l=(n(7294),n(3905)),i=["components"],o={},s="Linked List",p={unversionedId:"algorithms/linked-list",id:"algorithms/linked-list",title:"Linked List",description:"A linear collection of data elements whose order is not given by their physical placement in memory. Memory storage does not have to be",source:"@site/docs/algorithms/linked-list.mdx",sourceDirName:"algorithms",slug:"/algorithms/linked-list",permalink:"/shaokiat-blog/docs/algorithms/linked-list",draft:!1,editUrl:"https://github.com/shaokiat/shaokiat-blog/tree/main/docs/algorithms/linked-list.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Graphs",permalink:"/shaokiat-blog/docs/algorithms/graph"},next:{title:"LRU Cache",permalink:"/shaokiat-blog/docs/algorithms/lru-cache"}},c={},u=[{value:"Time Complexity",id:"time-complexity",level:2},{value:"Common Approaches to Linked List Questions",id:"common-approaches-to-linked-list-questions",level:2},{value:"Corner cases",id:"corner-cases",level:3},{value:"Example Solutions",id:"example-solutions",level:2},{value:"Reverse Linked list",id:"reverse-linked-list",level:3},{value:"Solution 1: Recursive Approach",id:"solution-1-recursive-approach",level:4},{value:"Solution 2: Iterative Approach <mark>(Prefered Solution)</mark>",id:"solution-2-iterative-approach-prefered-solution",level:4}],d={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"linked-list"},"Linked List"),(0,l.kt)("p",null,"A linear collection of data elements whose order is not given by their physical placement in memory. Memory storage does not have to be\ncontiguous as each element contains an address to the next element."),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Common Questions")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},(0,l.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/reverse-linked-list/"},"Reverse Linked list")," ",(0,l.kt)("br",null),"\n",(0,l.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/linked-list-cycle/"},"Linked List Cycle")," ",(0,l.kt)("br",null),"\n",(0,l.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/merge-two-sorted-lists/"},"Merge Two Sorted Lists")," ",(0,l.kt)("br",null)))),(0,l.kt)("h2",{id:"time-complexity"},"Time Complexity"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Operation"),(0,l.kt)("th",{parentName:"tr",align:null},"Big-O"),(0,l.kt)("th",{parentName:"tr",align:null},"Note"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Access"),(0,l.kt)("td",{parentName:"tr",align:null},"O(n)"),(0,l.kt)("td",{parentName:"tr",align:null},"Must traverse from start")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Search"),(0,l.kt)("td",{parentName:"tr",align:null},"O(n)"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Insert"),(0,l.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,l.kt)("td",{parentName:"tr",align:null},"Assuming you are at the node of insertion")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Remove"),(0,l.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,l.kt)("td",{parentName:"tr",align:null},"Assuming you are at the node of deletion")))),(0,l.kt)("h2",{id:"common-approaches-to-linked-list-questions"},"Common Approaches to Linked List Questions"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Counting number of nodes in the linked list O(n)"),(0,l.kt)("li",{parentName:"ul"},"Reversing a linked list in-place"),(0,l.kt)("li",{parentName:"ul"},"Merging two linked lists together"),(0,l.kt)("li",{parentName:"ul"},"Finding the middle node of the linked list using two pointers")),(0,l.kt)("h3",{id:"corner-cases"},"Corner cases"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Empty linked list"),(0,l.kt)("li",{parentName:"ul"},"Cycles in linked list")),(0,l.kt)("h2",{id:"example-solutions"},"Example Solutions"),(0,l.kt)("h3",{id:"reverse-linked-list"},(0,l.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/reverse-linked-list/"},"Reverse Linked list")),(0,l.kt)("h4",{id:"solution-1-recursive-approach"},"Solution 1: Recursive Approach"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"# linkedList = [1, 2, 3, 4, 5]\n\ndef reverseList(self, head):\n    # Base case: if 0 or 1 element return that element\n    if not head or not head.next:\n        return head\n    last = self.reverseList(head.next) # [5, 4, 3, 2]\n    head.next.next = head # [2] -> [1]\n    head.next = None # [1] -> None\n    return last # [5, 4, 3, 2, 1]\n")),(0,l.kt)("p",null,"Time Complexity: ",(0,l.kt)("inlineCode",{parentName:"p"},"O(n)")," for looping through the linked list."),(0,l.kt)("p",null,"Space Complexity: ",(0,l.kt)("inlineCode",{parentName:"p"},"O(n)")," for recursive stack of size ",(0,l.kt)("inlineCode",{parentName:"p"},"n"),"."),(0,l.kt)("br",null),(0,l.kt)("h4",{id:"solution-2-iterative-approach-prefered-solution"},"Solution 2: Iterative Approach ",(0,l.kt)("mark",null,"(Prefered Solution)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"def reverseList(self, head):\n    prev = None\n    while head:\n        curr = head # curr = [1]\n        head = head.next # head = [2]\n        curr.next = prev # [1](curr) -> None(prev)\n        prev = curr # prev = [1]\n    return prev\n")),(0,l.kt)("p",null,"Time Complexity: ",(0,l.kt)("inlineCode",{parentName:"p"},"O(n)")," for looping through the linked list."),(0,l.kt)("p",null,"Space Complexity: ",(0,l.kt)("inlineCode",{parentName:"p"},"O(1)")," for constant variables."),(0,l.kt)("br",null))}m.isMDXComponent=!0},3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,k=d["".concat(s,".").concat(m)]||d[m]||u[m]||l;return n?r.createElement(k,i(i({ref:t},c),{},{components:n})):r.createElement(k,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);
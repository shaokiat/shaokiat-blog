"use strict";(self.webpackChunksk_blog=self.webpackChunksk_blog||[]).push([[205],{8821:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return d},metadata:function(){return p},toc:function(){return c},default:function(){return u}});var a=t(7462),r=t(3366),i=(t(7294),t(3905)),o=["components"],s={sidebar_position:3},d="Graphs",p={unversionedId:"algorithms/graph",id:"algorithms/graph",isDocsHomePage:!1,title:"Graphs",description:"My second nemesis \ud83e\udd75!",source:"@site/docs/algorithms/graph.mdx",sourceDirName:"algorithms",slug:"/algorithms/graph",permalink:"/shaokiat-blog/docs/algorithms/graph",editUrl:"https://github.com/shaokiat/shaokiat-blog/tree/main/docs/algorithms/graph.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Dynamic Programming (Top Down)",permalink:"/shaokiat-blog/docs/algorithms/dynamic-programming-top-down"},next:{title:"Why I Chose Docusaurus",permalink:"/shaokiat-blog/docs/web-dev/docusaurus"}},c=[{value:"Topological Sort (Detecting cycle in directed graph)",id:"topological-sort-detecting-cycle-in-directed-graph",children:[],level:3}],l={toc:c};function u(e){var n=e.components,t=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"graphs"},"Graphs"),(0,i.kt)("p",null,"My second nemesis \ud83e\udd75!"),(0,i.kt)("h3",{id:"topological-sort-detecting-cycle-in-directed-graph"},"Topological Sort (Detecting cycle in directed graph)"),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"TIP")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"If you have not tried these questions, please give it a go first! \ud83d\udc7e ",(0,i.kt)("br",null),"\n",(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/course-schedule/"},"https://leetcode.com/problems/course-schedule/")," ",(0,i.kt)("br",null),"\n",(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/course-schedule-ii/"},"https://leetcode.com/problems/course-schedule-ii/")))),(0,i.kt)("div",{className:"admonition admonition-important alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Source")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"One of the ",(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/course-schedule/discuss/441722/Python-99-time-and-100-space.-Collection-of-solutions-with-explanation"},(0,i.kt)("strong",{parentName:"a"},"best explanation"))," by hxuanhung"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Method 1: DFS with stack")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n        visited = set()\n        graph = self.buildAdj(numCourses, prerequisites)\n\n        def hasCycle(v, stack):\n            if v in visited: # why check this?\n                if v in stack:\n                    # Cycle exists\n                    return True\n                # Visited but not in stack -> already checked before\n                return False\n\n            # Not visited\n            visited.add(v)\n            stack.append(v)\n\n            for d in graph[v]: # Check all descendants\n                if hasCycle(d, stack):\n                    return True\n\n            # Remove v from stack\n            stack.pop()\n            return False\n\n        for i in range(numCourses):\n            if hasCycle(i, []):\n                return False\n\n        return True\n\n    # Build adjacency matrix: prereq: [modules]\n    def buildAdj(self, n, p):\n        graph = [[] for i in range(n)]\n        for a, b in p: # b -> a : take course b first\n            graph[b].append(a)\n        return graph\n\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Method 2: BFS (Kanh's Algorithm)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n        return self.BFS(numCourses, prerequisites)\n\n\n    def BFS(self, n, p):\n        graph = self.buildAdj(n,p)\n        queue = []\n        topoOrder = []\n\n        # Store number of income edges for each vertex\n        inOrder = [0] * n\n        for a, b in p:\n            inOrder[a] += 1\n\n        # Add vertex with no incoming edges to queue\n        for v in range(n):\n            if inOrder[v] == 0:\n                queue.append(v)\n\n        count = 0\n        topoOrder = []\n        while queue:\n            v = queue.pop(0)\n            topoOrder.append(v)\n            count += 1\n\n            for d in graph[v]:\n                inOrder[d] -= 1\n                if inOrder[d] == 0:\n                    queue.append(d)\n\n        if count == n:\n            return True\n        else:\n            return False\n\n    # Build adjacency matrix: prereq: [modules]\n    def buildAdj(self, n, p):\n        graph = [[] for i in range(n)]\n        for a, b in p: # b -> a : take course b first\n            graph[b].append(a)\n        return graph\n")))}u.isMDXComponent=!0}}]);
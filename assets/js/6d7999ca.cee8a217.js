"use strict";(self.webpackChunksk_blog=self.webpackChunksk_blog||[]).push([[138],{1138:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return m}});var a=n(3117),r=n(102),l=(n(7294),n(3905)),o=["components"],i={},s="Linked List",p={unversionedId:"algorithms/linked-list",id:"algorithms/linked-list",title:"Linked List",description:"A linear collection of data elements whose order is not given by their physical placement in memory. Memory storage does not have to be",source:"@site/docs/algorithms/linked-list.mdx",sourceDirName:"algorithms",slug:"/algorithms/linked-list",permalink:"/shaokiat-blog/docs/algorithms/linked-list",draft:!1,editUrl:"https://github.com/shaokiat/shaokiat-blog/tree/main/docs/algorithms/linked-list.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Heaps",permalink:"/shaokiat-blog/docs/algorithms/heap"},next:{title:"LRU Cache",permalink:"/shaokiat-blog/docs/algorithms/lru-cache"}},d={},m=[{value:"Time Complexity",id:"time-complexity",level:2},{value:"Common Approaches to Linked List Questions",id:"common-approaches-to-linked-list-questions",level:2},{value:"Corner cases",id:"corner-cases",level:3},{value:"Example Solutions",id:"example-solutions",level:2},{value:"Reverse Linked list",id:"reverse-linked-list",level:3},{value:"Solution 1: Recursive Approach",id:"solution-1-recursive-approach",level:4},{value:"Solution 2: Iterative Approach <mark>(Prefered Solution)</mark>",id:"solution-2-iterative-approach-prefered-solution",level:4},{value:"Linked List Cycle",id:"linked-list-cycle",level:3},{value:"Solution: Two Pointers",id:"solution-two-pointers",level:4},{value:"Remove Nth Node From End of List",id:"remove-nth-node-from-end-of-list",level:3},{value:"Solution: Two Pointers",id:"solution-two-pointers-1",level:4}],c={toc:m};function u(e){var t=e.components,n=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"linked-list"},"Linked List"),(0,l.kt)("p",null,"A linear collection of data elements whose order is not given by their physical placement in memory. Memory storage does not have to be\ncontiguous as each element contains an address to the next element."),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Common Questions")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},(0,l.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/reverse-linked-list/"},"Reverse Linked list")," ",(0,l.kt)("br",null),"\n",(0,l.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/linked-list-cycle/"},"Linked List Cycle")," ",(0,l.kt)("br",null),"\n",(0,l.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/merge-two-sorted-lists/"},"Merge Two Sorted Lists")," ",(0,l.kt)("br",null),"\n",(0,l.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/remove-nth-node-from-end-of-list/"},"Remove Nth Node From End of List")," ",(0,l.kt)("br",null)))),(0,l.kt)("h2",{id:"time-complexity"},"Time Complexity"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Operation"),(0,l.kt)("th",{parentName:"tr",align:null},"Big-O"),(0,l.kt)("th",{parentName:"tr",align:null},"Note"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Access"),(0,l.kt)("td",{parentName:"tr",align:null},"O(n)"),(0,l.kt)("td",{parentName:"tr",align:null},"Must traverse from start")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Search"),(0,l.kt)("td",{parentName:"tr",align:null},"O(n)"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Insert"),(0,l.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,l.kt)("td",{parentName:"tr",align:null},"Assuming you are at the node of insertion")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Remove"),(0,l.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,l.kt)("td",{parentName:"tr",align:null},"Assuming you are at the node of deletion")))),(0,l.kt)("h2",{id:"common-approaches-to-linked-list-questions"},"Common Approaches to Linked List Questions"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Counting number of nodes in the linked list O(n)"),(0,l.kt)("li",{parentName:"ul"},"Reversing a linked list in-place"),(0,l.kt)("li",{parentName:"ul"},"Merging two linked lists together"),(0,l.kt)("li",{parentName:"ul"},"Finding the middle node of the linked list using two pointers")),(0,l.kt)("h3",{id:"corner-cases"},"Corner cases"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Empty linked list"),(0,l.kt)("li",{parentName:"ul"},"Cycles in linked list")),(0,l.kt)("h2",{id:"example-solutions"},"Example Solutions"),(0,l.kt)("h3",{id:"reverse-linked-list"},(0,l.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/reverse-linked-list/"},"Reverse Linked list")),(0,l.kt)("h4",{id:"solution-1-recursive-approach"},"Solution 1: Recursive Approach"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"# linkedList = [1, 2, 3, 4, 5]\n\ndef reverseList(self, head):\n    # Base case: if 0 or 1 element return that element\n    if not head or not head.next:\n        return head\n    last = self.reverseList(head.next) # [5, 4, 3, 2]\n    head.next.next = head # [2] -> [1]\n    head.next = None # [1] -> None\n    return last # [5, 4, 3, 2, 1]\n")),(0,l.kt)("p",null,"Time Complexity: ",(0,l.kt)("inlineCode",{parentName:"p"},"O(n)")," for looping through the linked list."),(0,l.kt)("p",null,"Space Complexity: ",(0,l.kt)("inlineCode",{parentName:"p"},"O(n)")," for recursive stack of size ",(0,l.kt)("inlineCode",{parentName:"p"},"n"),"."),(0,l.kt)("br",null),(0,l.kt)("h4",{id:"solution-2-iterative-approach-prefered-solution"},"Solution 2: Iterative Approach ",(0,l.kt)("mark",null,"(Prefered Solution)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"def reverseList(self, head):\n    prev = None\n    while head:\n        curr = head # curr = [1]\n        head = head.next # head = [2]\n        curr.next = prev # [1](curr) -> None(prev)\n        prev = curr # prev = [1]\n    return prev\n")),(0,l.kt)("p",null,"Time Complexity: ",(0,l.kt)("inlineCode",{parentName:"p"},"O(n)")," for looping through the linked list."),(0,l.kt)("p",null,"Space Complexity: ",(0,l.kt)("inlineCode",{parentName:"p"},"O(1)")," for constant variables."),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"linked-list-cycle"},(0,l.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/linked-list-cycle/"},"Linked List Cycle")),(0,l.kt)("h4",{id:"solution-two-pointers"},"Solution: Two Pointers"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\ndef hasCycle(self, head):\n    fast = slow = head\n    while fast and fast.next: # only need to check fast pointer as it is in front of slow pointer\n        fast = fast.next.next\n        slow = slow.next\n        if fast == slow:\n            return True\n    return False\n")),(0,l.kt)("p",null,"Time Complexity: ",(0,l.kt)("inlineCode",{parentName:"p"},"O(n)"),". ",(0,l.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/linked-list-cycle/discuss/44758/How-about-the-space-complexity"},(0,l.kt)("em",{parentName:"a"},"See here"))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Case 1: No cycle",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Fast")," pointer reaches the end in ",(0,l.kt)("inlineCode",{parentName:"li"},"n/2")," steps => O(n)"))),(0,l.kt)("li",{parentName:"ul"},"Case 2: Cycle exists",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Once the slower node reaches the cycle, the faster node catches up to the slower node in ",(0,l.kt)("inlineCode",{parentName:"li"},"k")," steps, where ",(0,l.kt)("inlineCode",{parentName:"li"},"k")," is the length of cycle. O((n - k) + k) => O(n)")))),(0,l.kt)("p",null,"Space Complexity: ",(0,l.kt)("inlineCode",{parentName:"p"},"O(1)")," for 2 constant variables ",(0,l.kt)("inlineCode",{parentName:"p"},"fast")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"slow"),"."),(0,l.kt)("h3",{id:"remove-nth-node-from-end-of-list"},(0,l.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/remove-nth-node-from-end-of-list/"},"Remove Nth Node From End of List")),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Excellent ",(0,l.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/remove-nth-node-from-end-of-list/discuss/1164542/JS-Python-Java-C%2B%2B-or-Easy-Two-Pointer-Solution-w-Explanation"},"leetcode explanation")," by sgallivan."))),(0,l.kt)("h4",{id:"solution-two-pointers-1"},"Solution: Two Pointers"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\ndef removeNthFromEnd(self, head, n):\n    fast = slow = head\n    # Move fast pointer first\n    for _ in range(n):\n        fast = fast.next\n    # Edge case: n == len(list), remove first node\n    if not fast:\n        return head.next\n    # Move both pointer until fast reaches the end\n    while fast.next:\n        slow = slow.next\n        fast = fast.next\n    # Remove nth node\n    slow.next = slow.next.next\n    return head\n")),(0,l.kt)("p",null,"Edge case explanation: when n == len(list), we want to remove the first node. ",(0,l.kt)("inlineCode",{parentName:"p"},"fast")," would reach the end of the list and be equal to ",(0,l.kt)("inlineCode",{parentName:"p"},"None"),", hence we check that ",(0,l.kt)("inlineCode",{parentName:"p"},"fast == None"),"."),(0,l.kt)("p",null,"Time Complexity: ",(0,l.kt)("inlineCode",{parentName:"p"},"O(n)")," as it is a one pass algorithm."),(0,l.kt)("p",null,"Space Complexity: ",(0,l.kt)("inlineCode",{parentName:"p"},"O(1)")," for 2 constant variables ",(0,l.kt)("inlineCode",{parentName:"p"},"fast")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"slow"),"."))}u.isMDXComponent=!0},3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(n),u=r,k=c["".concat(s,".").concat(u)]||c[u]||m[u]||l;return n?a.createElement(k,o(o({ref:t},d),{},{components:n})):a.createElement(k,o({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"}}]);
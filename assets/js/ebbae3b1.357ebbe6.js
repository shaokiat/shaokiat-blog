"use strict";(self.webpackChunksk_blog=self.webpackChunksk_blog||[]).push([[637],{4474:function(e,r,t){t.r(r),t.d(r,{assets:function(){return d},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return c}});var n=t(3117),a=t(102),o=(t(7294),t(3905)),l=["components"],i={},s="Binary Search Trees (BST)",p={unversionedId:"algorithms/binary-search-trees",id:"algorithms/binary-search-trees",title:"Binary Search Trees (BST)",description:"https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/",source:"@site/docs/algorithms/binary-search-trees.mdx",sourceDirName:"algorithms",slug:"/algorithms/binary-search-trees",permalink:"/shaokiat-blog/docs/algorithms/binary-search-trees",draft:!1,editUrl:"https://github.com/shaokiat/shaokiat-blog/tree/main/docs/algorithms/binary-search-trees.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Arrays and Subarrays",permalink:"/shaokiat-blog/docs/algorithms/arrays"},next:{title:"Binary Search",permalink:"/shaokiat-blog/docs/algorithms/binary-search"}},d={},c=[{value:"Time Complexity",id:"time-complexity",level:2},{value:"In-order Traversal",id:"in-order-traversal",level:3},{value:"Pre-order Traversal",id:"pre-order-traversal",level:3},{value:"Post-order Traversal",id:"post-order-traversal",level:3},{value:"Example Solutions",id:"example-solutions",level:2},{value:"Maximum Depth of Binary Tree",id:"maximum-depth-of-binary-tree",level:3},{value:"Solution 1: Recursive Approach",id:"solution-1-recursive-approach",level:4},{value:"Solution 2: Iterative Approach",id:"solution-2-iterative-approach",level:4},{value:"Construct Binary Tree from Preorder and Inorder Traversal",id:"construct-binary-tree-from-preorder-and-inorder-traversal",level:3},{value:"Solution: Recursive Approach",id:"solution-recursive-approach",level:4}],u={toc:c};function m(e){var r=e.components,t=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"binary-search-trees-bst"},"Binary Search Trees (BST)"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/"},"https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"common questions")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("ul",{parentName:"div"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/kth-smallest-element-in-a-bst/"},"Kth Smallest Element in a BST")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/maximum-depth-of-binary-tree/"},"Maximum Depth of Binary Tree")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/binary-tree-right-side-view/"},"Binary Tree Right Side View")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/"},"Construct Binary Tree from Preorder and Inorder Traversal"))))),(0,o.kt)("div",{align:"center"},(0,o.kt)("img",{src:"/shaokiat-blog/img/algo/bst.png",alt:"bst",width:"600"})),(0,o.kt)("div",{align:"center",width:"700",textAlign:"left",style:{}},"Source:",(0,o.kt)("a",{href:"https://medium.com/@konduruharish/binary-search-tree-in-typescript-and-c-25fa5107cc5d"},"Medium")),(0,o.kt)("h2",{id:"time-complexity"},"Time Complexity"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Operation"),(0,o.kt)("th",{parentName:"tr",align:null},"Big-O"),(0,o.kt)("th",{parentName:"tr",align:null},"Note"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Access"),(0,o.kt)("td",{parentName:"tr",align:null},"O(log(n))"),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Search"),(0,o.kt)("td",{parentName:"tr",align:null},"O(log(n))"),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Insert"),(0,o.kt)("td",{parentName:"tr",align:null},"O(log(n))"),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Remove"),(0,o.kt)("td",{parentName:"tr",align:null},"O(log(n))"),(0,o.kt)("td",{parentName:"tr",align:null})))),(0,o.kt)("h3",{id:"in-order-traversal"},"In-order Traversal"),(0,o.kt)("p",null,"Returns a sorted list."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Algorithm for In-order:\n    1. Traverse left subtree -> call Inorder(node.left)\n    2. Visit node\n    3. Traverse right subtree -> call Inorder(node.right)\n")),(0,o.kt)("h3",{id:"pre-order-traversal"},"Pre-order Traversal"),(0,o.kt)("p",null,"Used to create a copy of the tree."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Algorithm for Pre-order:\n    1. Visit node\n    2. Traverse left subtree -> call Preorder(node.left)\n    3. Traverse right subtree -> call Preorder(node.right)\n")),(0,o.kt)("h3",{id:"post-order-traversal"},"Post-order Traversal"),(0,o.kt)("p",null,"Used to delete a tree."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Algorithm for Post-order:\n    1. Traverse left subtree -> call Postorder(node.left)\n    2. Traverse right subtree -> call Postorder(node.right)\n    3. Visit node\n")),(0,o.kt)("h2",{id:"example-solutions"},"Example Solutions"),(0,o.kt)("h3",{id:"maximum-depth-of-binary-tree"},(0,o.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/maximum-depth-of-binary-tree/"},"Maximum Depth of Binary Tree")),(0,o.kt)("p",null,"A common approach to this question is to ",(0,o.kt)("strong",{parentName:"p"},"traverse by level"),"."),(0,o.kt)("h4",{id:"solution-1-recursive-approach"},"Solution 1: Recursive Approach"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\ndef maxDepth(self, root):\n  if not root:\n    return 0\n  return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))\n\n")),(0,o.kt)("p",null,"Time Complexity: ",(0,o.kt)("inlineCode",{parentName:"p"},"O(n)")," for traversing the entire binary tree."),(0,o.kt)("p",null,"Space Complexity: ",(0,o.kt)("inlineCode",{parentName:"p"},"O(n)")," for the recursion stack."),(0,o.kt)("br",null),(0,o.kt)("h4",{id:"solution-2-iterative-approach"},"Solution 2: Iterative Approach"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A stack to store the order of nodes to traverse"),(0,o.kt)("li",{parentName:"ul"},"Keeping track of the number of nodes in a level")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"def maxDepth(self, root):\n  height = 0\n  level = [root] if root else None # stack of nodes in the level\n  level_size = 1\n  while level:\n    node = level.pop(0)\n    if node.left:\n      level.append(node.left)\n    if node.right:\n      level.append(node.right)\n    level_size -= 1\n    if level_size == 0: # move on to next level\n      height += 1\n      level_size = len(level)\n  return height\n\n")),(0,o.kt)("p",null,"Time Complexity: ",(0,o.kt)("inlineCode",{parentName:"p"},"O(n)")," for traversing the entire binary tree."),(0,o.kt)("p",null,"Space Complexity: ",(0,o.kt)("inlineCode",{parentName:"p"},"O(log(n))")," for the stack of nodes in the level."),(0,o.kt)("br",null),(0,o.kt)("h3",{id:"construct-binary-tree-from-preorder-and-inorder-traversal"},(0,o.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/"},"Construct Binary Tree from Preorder and Inorder Traversal")),(0,o.kt)("p",null,"An excellent question to test your understanding of preorder and inorder traversal."),(0,o.kt)("h4",{id:"solution-recursive-approach"},"Solution: Recursive Approach"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\ndef buildTree(self, preorder, inorder):\n  if inorder:\n    i = inorder.index(preorder.pop(0)) # get index of root in inorder\n    root = TreeNode(inorder[i])\n    root.left = self.buildTree(preorder, inorder[:i])\n    root.right = self.buildTree(preorder, inorder[i+1:])\n    return root\n")),(0,o.kt)("p",null,"Time Complexity: ",(0,o.kt)("inlineCode",{parentName:"p"},"O(n)")," for traversing both array."),(0,o.kt)("p",null,"Space Complexity: ",(0,o.kt)("inlineCode",{parentName:"p"},"O(n)")," for the recursion stack."),(0,o.kt)("br",null))}m.isMDXComponent=!0},3905:function(e,r,t){t.d(r,{Zo:function(){return d},kt:function(){return m}});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),p=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},d=function(e){var r=p(e.components);return n.createElement(s.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=p(t),m=a,h=u["".concat(s,".").concat(m)]||u[m]||c[m]||o;return t?n.createElement(h,l(l({ref:r},d),{},{components:t})):n.createElement(h,l({ref:r},d))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=u;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=t[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);